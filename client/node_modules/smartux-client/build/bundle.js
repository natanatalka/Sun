// DEPENDENCIES:
let path = require('path');
let generateContext = require('@ionic/app-scripts/dist/util/config').generateContext;
let setContext = require('@ionic/app-scripts/dist/util/helpers').setContext;
let transpile = require('@ionic/app-scripts/dist/transpile').transpile;
let preprocess = require('@ionic/app-scripts/dist/preprocess').preprocess;
let bundle = require('@ionic/app-scripts/dist/bundle').bundle;
let copy = require('@ionic/app-scripts/dist/copy').copy;
let copyCustom = require('./helpers/copy').custom;
let styles = require('./helpers/styles').compile;

// GET PARAMS:
let PATH = path.resolve(process.argv[process.argv.indexOf('--path') + 1]);
let MODULE = process.argv[process.argv.indexOf('--module') + 1];
let COPY = process.argv.indexOf('--copy-assets') > -1;
let STYLES = process.argv.indexOf('--styles') > -1;

if (['main', 'vendors', 'components'].indexOf(MODULE) < 0) {
  throw new Error('Wrong module name: ' + MODULE);
}

// CONFIGURE:
process.env.IONIC_ROOT_DIR = PATH;
process.env.IONIC_BUILD_DIR = PATH + '/www/build';
process.env.IONIC_SOURCE_MAP_TYPE = 'source-map';
process.env.IONIC_PARSE_DEEPLINKS = false;
process.env.IONIC_TS_CONFIG = path.resolve('config/' + MODULE + '.tsconfig.json');

// PREPARE:
let webpackConfig = path.resolve('config/' + MODULE + '.webpack.js');
let context = generateContext(null);
setContext(context);

// RUN:
(async () => {
  if (COPY) {
    await copy(context);
    await copyCustom(context);
  }
  if (STYLES) {
    await styles(context)
  }
  await transpile(context);
  await preprocess(context);
  await bundle(context, webpackConfig);
})().catch(error => {
  console.log(error);
  process.exit(1);
});
