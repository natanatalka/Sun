import { Injectable } from '@angular/core';
import { Http } from '@angular/http';
import { BehaviorSubject } from 'rxjs/BehaviorSubject';
import { config } from '../config';
import { options } from '../options';
import { AppService } from '../services/app.service';
import { DataService } from '../services/data.service';
import { QueueService } from '../services/queue.service';
import { UiService } from '../services/ui.service';
import { ApiService } from './api.service.abstract';
import { HandlerService } from './handler.service';

const keepAliveMethod = 'app.keepalive';

@Injectable()
export class HttpApiService extends ApiService {
  private keepAliveInterval: number;
  private data: any;

  data$: BehaviorSubject<any> = new BehaviorSubject({});

  constructor(
    private appService: AppService,
    private queueService: QueueService,
    private handlerService: HandlerService,
    private dataService: DataService,
    private http: Http,
    private uiService: UiService
  ) {
    super();
  }

  initialize(options: any): Promise<void> {
    return this.appService.call('initialize', options);
  }

  async initializeScreen(screenId: string): Promise<void> {
    let data = await this.dataService.processResponse({}, {}, screenId);
    this.data$.next(data);
  }

  async request(method: string, params: any): Promise<void> {
    this.stopHeartbeat(method);

    let screenId;
    let response = await this.queueService.push(() => this.callMethod(method, params));
    if (response.nextScreen) {
      screenId = response.nextScreen;
      delete response.nextScreen;
      await this.handlerService.handleResponse(screenId, response);
    }

    this.data = await this.dataService.processResponse(this.data, response, screenId);
    this.data$.next(this.data);

    // At this point overrides have happened and we can start the heartbeat
    this.startHeartbeat(method);
  }

  // ----------------------------------------------------------------------------------------------

  private async callMethod(method: string, params: any): Promise<any> {
    let response = await this.http.post(options.rpcUrl, {jsonrpc: '2.0', method: method, params: params}).toPromise();
    let res = response.json();
    if (res) {
      let result = res.data.result;
      if (result.success === false) {
        let message = result.reason || config.messages.responseError;
        setTimeout(async () => {
          await this.uiService.hideLoading();
          this.uiService.alert('', message);
        }, 100);
      }
    }
    return res;
  }

  private startHeartbeat(method: string): void {
    if (method !== keepAliveMethod && config.keepAliveTimeout > 0) {
      this.keepAliveInterval = setInterval(() => {
        this.appService.call(keepAliveMethod, null, true);
      }, config.keepAliveTimeout);
    }
  }

  private stopHeartbeat(method: string): void {
    if (method !== keepAliveMethod && config.keepAliveTimeout > 0) {
      clearInterval(this.keepAliveInterval);
    }
  }

}
