import { Injectable } from '@angular/core';
import { BehaviorSubject } from 'rxjs/BehaviorSubject';
import { BaseScreen } from '../screen';
import { DataService } from '../services/data.service';
import { MockService } from '../services/mock.service';
import { NavigationService } from '../services/navigation.service';
import { ScreenService } from '../services/screen.service';
import { UiService } from '../services/ui.service';
import { ApiService } from './api.service.abstract';

@Injectable()
export class MockApiService extends ApiService {

  data$: BehaviorSubject<any> = new BehaviorSubject({});

  constructor(
    private screenService: ScreenService,
    private navigationService: NavigationService,
    private uiService: UiService,
    private mockService: MockService,
    private dataService: DataService
  ) {
    super();
  }

  async initialize(): Promise<void> {
    await this.navigationService.openStartScreen();
    let screen = await this.screenService.getCurrent();
    if (!screen) return;

    let data = await this.mockService.getMockData(screen);
    data = await this.dataService.processResponse({}, data, screen.id);
    this.data$.next(data);
  }

  async initializeScreen(screenId: string): Promise<void> {
    let screen = await this.screenService.getById(screenId);
    let data = await this.mockService.getMockData(screen);
    data = await this.dataService.processResponse({}, data, screenId);
    this.data$.next(data);
  }

  async request(method: string, params: any, context?: BaseScreen) {
    switch (method) {
    case 'logout':
      return this.mockService.mockLogout();
    case 'screen':
      return this.mockService.mockNavigation(params.screen);
    case 'update':
      return this.uiService.hideLoading();
    case 'reportIssue':
    case 'logException':
      // Do nothing.
      return;
    default:
      return this.mockService.mockCall(method, params, context);
    }
  }

}
