import { Injectable } from '@angular/core';
import { AppService } from '../services/app.service';
import { NavigationService } from '../services/navigation.service';
import { ScreenService } from '../services/screen.service';
import { UiService } from '../services/ui.service';

@Injectable()
export class HandlerService {

  constructor(
    private screenService: ScreenService,
    private navigationService: NavigationService,
    private appService: AppService,
    private uiService: UiService
  ) {}

  async handleResponse(method: string, params: any) {
    switch (method) {
    case 'error':
      return this.error(params);
    case 'ui.showLoading':
      return this.showLoading(params);
    case 'ui.initialize':
      return this.initializeUi(params);
    default:
      return this.setScreen(method, params);
    }
  }

  // ----------------------------------------------------------------------------------------------

  private async error(params) {
    await this.uiService.hideLoading();
    this.uiService.alert('Server Error: ', params.error);
  }

  private async showLoading(params) {
    this.uiService.showLoading(params && params.message);
  }

  private async initializeUi(params) {
    console.log('Initialize UI');
    this.appService.appHooks.initializeUI(params);
  }

  private async setScreen(method, params) {
    let screenId = method.replace(/^setState\./, '');
    let oldScreenId = this.screenService.getCurrentId();
    let newScreenId = screenId + (params && params.clientsubscreen ? '_' + params.clientsubscreen : '');
    newScreenId = this.appService.appHooks.overrideStateHandler(oldScreenId, newScreenId, params);
    if (newScreenId == null) {
      return;
    }
    console.log('Going to new screen', newScreenId, params);
    if (oldScreenId !== newScreenId) {
      await this.navigationService.go(newScreenId);
    }
    this.uiService.hideLoading();

    return newScreenId;
  }

}
