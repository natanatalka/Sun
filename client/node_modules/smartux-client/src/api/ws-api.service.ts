import { Injectable } from '@angular/core';
import { BehaviorSubject } from 'rxjs/BehaviorSubject';
import { config } from '../config';
import { BaseScreen } from '../screen';
import { DataService } from '../services/data.service';
import { UiService } from '../services/ui.service';
import { WsService } from '../services/ws.service';
import { ApiService } from './api.service.abstract';
import { HandlerService } from './handler.service';

@Injectable()
export class WsApiService extends ApiService {
  private data: any;

  data$: BehaviorSubject<any> = new BehaviorSubject({});

  constructor(
    private wsService: WsService,
    private handlerService: HandlerService,
    private uiService: UiService,
    private dataService: DataService
  ) {
    super();
  }

  initialize(options: any): Promise<void> {
    this.wsService.connect(options);
    this.wsService.onMessage(async event => {
      let rpcRequest = JSON.parse(event.data);
      if (!rpcRequest.method) {
        return;
      }
      let screenId = await this.handlerService.handleResponse(rpcRequest.method, rpcRequest.params);
      this.data = await this.dataService.processResponse(this.data, rpcRequest.params, screenId);
      this.data$.next(this.data);
    });
    return Promise.resolve();
  }

  async initializeScreen(screenId: string): Promise<void> {
    let data = await this.dataService.processResponse({}, {}, screenId);
    this.data$.next(data);
  }

  request(method: string, params: any, context?: BaseScreen): Promise<void> {
    if (this.wsService.isConnected()) {
      // send JSON-RPC message if WS connection is open:
      this.wsService.send({
        jsonrpc: '2.0',
        method: method,
        params: params
      });
    } else {
      // show error message if WS connection is closed:
      this.uiService.hideLoading();
      let alert = this.uiService.alert(null, config.messages.connectionLost);
      alert.onDidDismiss(() => window.history.go(0));
    }
    return Promise.resolve();
  }

}
