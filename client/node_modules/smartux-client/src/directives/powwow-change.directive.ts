import { AfterViewInit, Directive, ElementRef, Injectable, Input, OnChanges, SimpleChange } from '@angular/core';
import { AppService } from '../services/app.service';
import { DataService } from '../services/data.service';

@Directive({
  selector: '[powwow-change]',
  host: {
    '(focus)': 'onFocus()',
    '(blur)': 'onBlur()'
  }
})

@Injectable()
export class PowwowChangeDirective implements AfterViewInit, OnChanges {

  constructor(
    private el: ElementRef,
    private appService: AppService,
    private dataService: DataService
  ) {}

  fieldModel: any;
  params: any;
  currentValue: any;
  firstChange: boolean = true;

  @Input('indices') indices: number[];
  @Input('powwow-change') powwowChange: string;
  @Input('ngModel') ngModel: string;
  @Input('type') type: string;

  ngAfterViewInit() {
    this.fieldModel = this.ngModel;
    try {
      this.params = JSON.parse(this.powwowChange);
    } catch (e) {
      this.params = {};
    }
    if (this.params.field) {
      this.params.field = this.dataService.replaceObjectWithIndex(this.params.field, this.indices);
      this.fieldModel = this.params.field;
    }
  }

  ngOnChanges(changes: { [ngModel: string]: SimpleChange }) {
    if (changes['ngModel'] && this.fieldModel) {
      this.firstChange = changes['ngModel'].firstChange;
      this.currentValue = changes['ngModel'].currentValue;
    }
  }

  onFocus() {
    if (this.isTextField()) {
      this.appService.setFieldChangePending(true);
    }
  }

  onBlur() {
    if (this.isTextField()) {
      this.appService.setFieldChangePending(false);
      this.updateField();
    }
  }

  private updateField() {
    if (!this.firstChange) {
      this.appService.updateField(this.fieldModel, this.currentValue, this.params);
    }
  }

  private isTextField() {
    return this.el.nativeElement.nodeName === 'ION-INPUT' && (this.type === 'text' || this.type === 'password');
  }

}
