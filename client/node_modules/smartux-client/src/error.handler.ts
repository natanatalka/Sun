import { ApplicationRef, Injectable, Injector } from '@angular/core';
import { IonicErrorHandler } from 'ionic-angular';
import { config } from './config';
import { AppService } from './services/app.service';
import { UiService } from './services/ui.service';

@Injectable()
export class ExceptionHandler extends IonicErrorHandler {

  constructor(
    private uiService: UiService,
    private appService: AppService,
    private injector: Injector
  ) {
    super();
  }

  errorCount = 0;

  handleError(error: any): void {
    this.errorCount++;
    super.handleError(error);

    try {
      if (!config.noLogExceptions && !this.isConnectionError(error)) {
        //Log the error.
        this.appService.call('logException', {message: error.message, stack: error.stack, cause: false}, true);
      }
      // Show error to the user.
      if (!config.ignoreExceptions && this.errorCount === 1) {
        let title = config.messages.jsErrorTitle;
        let message = `<pre style="font-size: 10px">${error.stack}</pre>`;
        setTimeout(async () => {
          await this.uiService.hideLoading();
          this.uiService.alert(title, message);
        }, 100);
      }

      // Explicitly process change detection for prevent infinite loop
      // of exceptions and locking up the application
      if (this.errorCount > 1) {
        let appRef = this.injector.get(ApplicationRef);
        appRef.tick();
      }
    } catch (e) {}
  }

  private isConnectionError(err) {
    return err.stack.indexOf('Response with status: 0') > -1;
  }

}
