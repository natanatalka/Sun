import { parse } from 'query-string';
import { config } from './config';

let queryParams = parse(window.location.search);
let rpcUrl, apiMode, hasExplicitRpcUrl;
let websocketConnection = true;
let connectUrl = queryParams.connectUrl || queryParams.sessionURL;

processURLParams();
determineConnectUrl();

export let options = {
  screen: queryParams.screen,
  env: queryParams.env || config.defaultEnv,
  hasExplicitRpcUrl: hasExplicitRpcUrl,
  rpcUrl: rpcUrl,
  isWebSocket: websocketConnection,
  connectUrl: connectUrl,
  apiMode: apiMode,
  device: queryParams.device,
  endSessionURL: queryParams.endSessionURL
};

// ------------------------------------------------------------------------------------------------

function processURLParams() {
  // In order of precedence, the URL parameter can contain one of:
  // 1) "rpcUrl" parameter with value "mock" or "mock=<...>"
  if (typeof(queryParams.mock) !== 'undefined' || queryParams.rpcUrl == 'mock') {
    rpcUrl = 'mock';
    apiMode = 'mock';
    websocketConnection = false;
  } else if (queryParams.rpcUrl) {
    // 2) "rpcUrl" parameter
    rpcUrl = queryParams.rpcUrl;
    hasExplicitRpcUrl = true;
    // if rpcUrl is not like "http(s)://", it is webSocket connection
    websocketConnection = rpcUrl.indexOf('http') != 0;
    apiMode = websocketConnection ? 'ws' : 'http';
  } else if (queryParams.sessionURL) {
    // 3) proceed without setting rpcUrl, it will be set by connectUsingSessionUrl
  } else {
    // 4) powwowLogin
    apiMode = 'powwowLogin';
  }
}

function determineConnectUrl() {
  // The URL will either contain "rpcUrl=<...>" with an optional "connectUrl=<...>" OR it will contain a "sessionURL=<...>".
  // The connectUrl/sessionURL are the same thing and can be queried to determine if the session is alive and to get the
  // rpcUrl.
  if (!connectUrl && websocketConnection && rpcUrl) {
    // If making a secure websocket connection, use https for connect url,
    // otherwise use http for connect url.
    let secureProtocol = rpcUrl && (rpcUrl.indexOf('wss:') == 0);
    // Match either "ws://host:port/sessions" or "wss://host:port/sessions"
    let connectHostMatch = rpcUrl.match(/wss?:\/\/(\S+)\/sessions/);
    let connectHost;
    if (connectHostMatch && connectHostMatch.length > 1) {
      connectHost = connectHostMatch[1];
    } else {
      connectHost = config.rpc.defaultHost + ':' + config.rpc.defaultPort;
    }
    let sessionIdMatch = null;
    if (rpcUrl.match(/\/sessions\/(\S[^\/]+)/)) {
      sessionIdMatch = rpcUrl.match(/\/sessions\/(\S[^\/]+)/);
    }
    let sessionId = '';
    if (sessionIdMatch && sessionIdMatch.length > 1) {
      sessionId = sessionIdMatch[1];
    }
    if (sessionId) {
      // Determine the connect URL from the websocket url.
      connectUrl = (secureProtocol ? 'https://' : 'http://') + connectHost + '/sessions/' + sessionId;
    }
  }
}
