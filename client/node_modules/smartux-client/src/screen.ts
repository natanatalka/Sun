import { OnDestroy, OnInit } from '@angular/core';
import { Subscription } from 'rxjs/Subscription';
import { ApiService } from './api/api.service.abstract';
import { DI } from './di';
import { AppService } from './services/app.service';
import { DataService } from './services/data.service';
import { NavigationService } from './services/navigation.service';
import { ScreenService } from './services/screen.service';
import { UiService } from './services/ui.service';

export class BaseScreen implements OnInit, OnDestroy {
  private apiService = DI.get<ApiService>(ApiService);
  private appService = DI.get<AppService>(AppService);
  private dataService = DI.get<DataService>(DataService);
  private navigationService = DI.get<NavigationService>(NavigationService);
  private uiService = DI.get<UiService>(UiService);
  private screenService = DI.get<ScreenService>(ScreenService);

  private subscription: Subscription;

  data = {};

  // ----------------------------------------------------------------------------------------------

  async ionViewCanEnter() {
    let enteringScreenId = this.screenService.classNameToId(this.constructor.name);
    await this.apiService.initializeScreen(enteringScreenId);
  }

  async ionViewCanLeave() {
    this.subscription.unsubscribe();
  }

  ngOnInit() {
    this.subscription = this.apiService.data$.subscribe(data => this.data = data);
  }

  ngOnDestroy() {
    this.subscription.unsubscribe();
  }

  // ----------------------------------------------------------------------------------------------

  // Make a call to the server. If there are no params given, use the screen data
  async call(method, params?) {
    this.appService.call(method, params, false, this);
  }

  // Set the pending fiend change
  setFieldChangePending(changePending) {
    this.appService.setFieldChangePending(changePending);
  }

  async updateField(fieldModel, value, params) {
    this.appService.updateField(fieldModel, value, params);
  }

  async relatedScreen(screenId, refresh) {
    this.appService.relatedScreen(screenId, refresh);
  }

  // Send a "method" call to the server
  async method(method, params?) {
    this.appService.method(method, params, this);
  }

  // Send an "action" call to the server
  async action(action, indices, timeout) {
    this.appService.action(action, indices, timeout, this);
  }

  // Report an issue
  reportIssue() {
    this.appService.reportIssue();
  };

  // Perform appLogin or reconnect in case we have no url.rpc
  establishConnection() {
    this.appService.establishConnection();
  }

  // End the session using the end session URL
  endSession() {
    this.appService.endSession();
  }

  // Perform CB login and connect to the session if no url.rpc
  login(credentials) {
    return this.appService.login(credentials);
  }

  // Perform application logout
  logout(otherUserConnected) {
    this.appService.logout(otherUserConnected);
  }

  // Get app settings from mobile device
  getAppSettings(showSettings) {
    this.appService.getAppSettings(showSettings);
  }

  // Change mock-set for a screen
  screenMocks(mockSet) {
    return this.appService.updateScreenData(mockSet);
  }

  // ----------------------------------------------------------------------------------------------

  // Navigate to screen
  go(screenId) {
    return this.navigationService.go(screenId);
  }

  // Open external links
  openUrl(url) {
    this.navigationService.openUrl(url);
  }

  // ----------------------------------------------------------------------------------------------

  // Show loading spinner
  showLoading(message) {
    this.uiService.showLoading(message);
  }

  // Hide loading spinner
  hideLoading() {
    this.uiService.hideLoading();
  }

  // Show side menu
  showMenu() {
    this.uiService.showMenu();
  }

  // Hide side menu
  hideMenu() {
    this.uiService.hideMenu();
  }

  // Scroll page to the top
  scrollTop() {
    return this.uiService.scrollTop();
  };

  // ----------------------------------------------------------------------------------------------

  // Returns 'true' if item is selected
  isSelected(selectData, item) {
    return this.dataService.isSelected(selectData, item);
  }

  // Toggle selection of the item
  toggleSelection(selectData, item) {
    this.dataService.toggleSelection(selectData, item);
  }
}
