import { Injectable, Injector } from '@angular/core';
import { Http } from '@angular/http';
import { App } from 'ionic-angular';
import * as _ from 'lodash';
import { options } from '../options';
import { ScreenData } from '../types';
import { DataService } from './data.service';
import { ScreenModelService } from './screen-model.service';

const startScreen = options.screen;

@Injectable()
export class ScreenService {
  private screens: Promise<ScreenData>;

  constructor(
    http: Http,
    private app: App,
    private injector: Injector,
    private screenModelService: ScreenModelService
  ) {
    this.screens = http.get('screens.json')
      .map(res => res.json())
      .map(screensTree => this.process(screensTree))
      .toPromise();
  }

  get(): Promise<ScreenData> {
    return this.screens;
  }

  async getById(id: string): Promise<ScreenData | null> {
    let screensTree = await this.get();
    let parts = id.split('_');
    let parentId = parts.shift();
    let screen = _.find(screensTree.screens, {id: parentId});
    while (parts.length) {
      if (!screen) return null;
      parentId += '_' + parts.shift();
      screen = _.find(screen.screens, {id: parentId});
    }
    if (screen) {
      screen.mockSet = screen.mockSet || 'default';
    }
    return screen;
  }

  getCurrentComponentName(): string {
    let activeComponent = this.app.getActiveNavs()[0].getActive();
    if (!activeComponent) {
      return null;
    }
    let componentName = activeComponent.component.name;
    if (componentName === 'ModalCmp') {
      componentName = activeComponent.data.component.name;
    }
    return componentName;
  }

  getCurrentId(): string {
    let componentName = this.getCurrentComponentName();
    return componentName ? this.classNameToId(componentName) : null;
  }

  getCurrent(): Promise<ScreenData> {
    let screenId = this.getCurrentId();
    return screenId ? this.getById(screenId) : null;
  }

  async getStartScreenId(): Promise<string> {
    if (startScreen) {
      return startScreen;
    } else {
      let screensTree = await this.get();
      return screensTree.startScreen || 'Login';
    }
  }

  async updateDataStubs(data: any, screenId?: string): Promise<any> {
    screenId = screenId || this.getCurrentId();
    // in case first load of the application we have ui.initialize call, that has no screenId
    if (!screenId) {
      return;
    }
    let screenModel = await this.screenModelService.getById(screenId);
    const dataService = this.injector.get(DataService);
    dataService.processScreenData(screenModel.properties, data);
  }

  classNameToId(className: string): string {
    let parts = className.split('_');
    parts.pop();
    return parts.join('_');
  }

  // ----------------------------------------------------------------------------------------------

  private process(tree: ScreenData): ScreenData {
    // short IDs => long IDs:
    this.eachNode(tree.screens, (node, parent) => {
      if (parent) {
        node.id = parent.id + '_' + node.id;
      }
    });
    return tree;
  }

  private eachNode(screens: ScreenData[], iteratee: Function, parent?: ScreenData): void {
    _.each(screens, node => {
      iteratee(node, parent);
      if (node.screens) {
        this.eachNode(node.screens, iteratee, node);
      }
    });
  }

}
