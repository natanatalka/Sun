import { Injectable, Injector, ViewChild } from '@angular/core';
import { Alert, AlertController, Content, Loading, LoadingController, MenuController, Modal, ModalController } from 'ionic-angular';
import { AlertButton } from 'ionic-angular/umd/components/alert/alert-options';
import { Page } from 'ionic-angular/umd/navigation/nav-util';
import { config } from '../config';
import { PmServer } from '../pm-rpc/server';
import { AppService } from './app.service';

@Injectable()
export class UiService {
  @ViewChild(Content) content: Content;

  private loadingSpinner: Loading;
  private loadingTimeoutId: number;
  private longLoadingAlert: Alert;
  private modalScreen: Modal;

  constructor(
    private injector: Injector,
    private loadingCtrl: LoadingController,
    private alertCtrl: AlertController,
    private modalCtrl: ModalController,
    private menuCtrl: MenuController,
    private pmServer: PmServer
  ) {
    this.pmServer.registerMethods({
      setZoom: this.setZoom
    });
  }

  showLoading(message?) {
    clearTimeout(this.loadingTimeoutId);
    if (this.loadingSpinner) {
      this.loadingSpinner.setContent(message);
    } else {
      this.loadingSpinner = this.loadingCtrl.create({content: message});
      this.loadingSpinner.present();
    }
    this.loadingTimeoutId = setTimeout(async () => {
      await this.hideLoading();
      this.longLoadingAlert = this.alert(null, config.messages.longLoading, [{
        text: 'Wait',
        role: 'cancel',
        handler: () => this.showLoading(message)
      }, {
        text: 'Report An Issue',
        handler: () => this.injector.get(AppService).reportIssue()
      }]);
    }, config.loadingTimeout);
  }

  async hideLoading() {
    if (this.loadingTimeoutId) {
      clearTimeout(this.loadingTimeoutId);
      this.loadingTimeoutId = null;
    }
    if (this.longLoadingAlert) {
      await this.longLoadingAlert.dismiss();
      this.longLoadingAlert = null;
    }
    if (this.loadingSpinner) {
      await this.loadingSpinner.dismiss();
      this.loadingSpinner = null;
    }
  }

  alert(title: string, message: string, buttons?: AlertButton[]) {
    let alert = this.alertCtrl.create({
      title: title,
      message: message,
      buttons: buttons ? buttons : ['Ok'],
      enableBackdropDismiss: false
    });
    alert.present();
    return alert;
  }

  modal(component: Page) {
    if (this.modalScreen) {
      this.modalScreen.dismiss();
    }
    this.modalScreen = this.modalCtrl.create(component, null, {enableBackdropDismiss: false});
    return this.modalScreen.present();
  }

  scrollTop() {
    return this.content.scrollToTop();
  }

  showMenu() {
    this.menuCtrl.open();
  }

  hideMenu() {
    this.menuCtrl.close();
  }

  setZoom(zoom: string): void {
    document.body.style.zoom = zoom;
  }

}
