import { Injectable } from '@angular/core';
import { Http } from '@angular/http';
import { BaseScreen } from '../screen';
import { AppMocks, Params, ScreenData } from '../types';
import { DataService } from './data.service';
import { NavigationService } from './navigation.service';
import { UiService } from './ui.service';

@Injectable()
export class MockService {
  private appMocks: AppMocks;

  constructor(
    private http: Http,
    private dataService: DataService,
    private navigationService: NavigationService,
    private uiService: UiService
  ) {}

  initialize(appMocks: AppMocks) {
    this.appMocks = appMocks;
  }

  async getMockData(screen: ScreenData): Promise<any> {
    let response = await this.http.get(`mocks/${screen.id}/${screen.mockSet}.json`).toPromise();
    let data = response.json();
    this.dataService.chooseSelectItems(data);
    return data;
  }

  async mockLogout(): Promise<void> {
    await this.navigationService.openStartScreen();
    this.uiService.hideLoading();
  }

  mockNavigation(screenId: string): void {
    this.navigationService.go(screenId);
  }

  async mockCall(method: string, params: Params, context: BaseScreen): Promise<void> {
    let modelId = params.model;
    let methodName = params.action.replace(/\./g, '_').replace(/\[.*?\]/g, '').replace(/^data_/, '');
    if (this.appMocks[modelId] && typeof this.appMocks[modelId][methodName] === 'function') {
      // if mock action performs a screen transition, then it must return a promise (e.g. "return this.go('Home');")
      let promise = this.appMocks[modelId][methodName].call(context, params);
      if (promise && typeof promise.then === 'function') {
        await promise;
      }
    } else {
      this.uiService.alert(method, 'Mock action is missing');
    }
    this.uiService.hideLoading();
  }

}
