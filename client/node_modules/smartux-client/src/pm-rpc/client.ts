import { Injectable } from '@angular/core';

@Injectable()
export class PmClient {
  private pending = {};
  private uid = 1000;
  private targetWindow: Window;

  constructor() {
    window.addEventListener('message', (event) => {
      let response;

      try {
        response = JSON.parse(event.data);
      } catch (error) {
        // do nothing
      }

      if (!response || response.jsonrpc !== '2.0' || !response.id) { // skip non-RPC messages
        return;
      }

      if (!this.pending[response.id]) {
        return;
      }

      if (response.error) {
        console.log('JSON-RPC error:', this.pending[response.id].request, response);
        this.pending[response.id].reject(response.error);
      } else {
        this.pending[response.id].resolve(response.result);
      }

      delete this.pending[response.id];
    }, false);
  }

  initialize(targetWindow: Window): void {
    this.targetWindow = targetWindow;
  };

  createNotification(name: string): Function {
    return (...params) => {
      if (!this.targetWindow) {
        return Promise.reject('The target window is not set');
      }
      this.sendRequest(name, params);
    };
  }

  createMethod<T>(name: string): (...params: any[]) => Promise<T> {
    return (...params: any[]) => {
      if (!this.targetWindow) {
        return Promise.reject('The target window is not set');
      }
      return new Promise<T>((resolve, reject) => {
        let request = this.sendRequest(name, params, this.uid++);
        this.pending[request.id] = {resolve: resolve, reject: reject, request: request};
      });
    };
  };

  // ----------------------------------------------------------------------------------------------

  private sendRequest(methodName: string, params: any, id?: number) {
    let request = {jsonrpc: '2.0', method: methodName, params: params, id: id};
    this.targetWindow.postMessage(JSON.stringify(request), '*');
    return request;
  }

}
