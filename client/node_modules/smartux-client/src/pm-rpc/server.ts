import { Injectable } from '@angular/core';

@Injectable()
export class PmServer {
  private api: { [key: string]: Function } = {};

  constructor() {
    window.addEventListener('message', async (event) => {
      let request;

      try {
        request = JSON.parse(event.data);
      } catch (error) {
        // do nothing
      }

      if (!request || request.jsonrpc !== '2.0' || request.error || request.result) { // skip non-RPC messages
        return;
      }

      if (typeof this.api[request.method] !== 'function') {
        return this.sendError(event.source, -32601, 'Method not found: ' + request.method, request.id);
      }

      if (request.method && !Array.isArray(request.params)) {
        return this.sendError(event.source, -32700, 'Invalid request', request.id);
      }

      try {
        let promiseOrResult = this.api[request.method].apply(null, request.params);
        let result = await Promise.resolve(promiseOrResult);
        if (!event.source) { // handle cases when the source window does not exist anymore:
          return false;
        }
        if (request.id) { // send the response only if the request ID is provided:
          this.sendResult(event.source, result, request.id);
        }
      } catch (error) {
        this.sendError(event.source, -32000, error.message, request.id);
        throw error;
      }
    }, false);
  }

  registerMethods(api: { [key: string]: Function }): void {
    Object.assign(this.api, api);
  }

  // ----------------------------------------------------------------------------------------------

  private sendResult(source: Window, result: any, id: string): void {
    source.postMessage(JSON.stringify({jsonrpc: '2.0', result: result, id: id}), '*');
  }

  private sendError(source: Window, code: number, message: string, id: string): void {
    source.postMessage(JSON.stringify({jsonrpc: '2.0', code: code, error: message, id: id || null}), '*');
  }

}
